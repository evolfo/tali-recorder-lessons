{"id":"node_modules/semantic-ui-react/node_modules/lodash/_cloneDataView.js","dependencies":[{"name":"/Users/angelospampinato/Development/tali-lessons/package.json","includedInParent":true,"mtime":1600925821292},{"name":"/Users/angelospampinato/Development/tali-lessons/.babelrc","includedInParent":true,"mtime":1600800641143},{"name":"/Users/angelospampinato/Development/tali-lessons/node_modules/semantic-ui-react/node_modules/lodash/package.json","includedInParent":true,"mtime":1600800701056},{"name":"./_cloneArrayBuffer","loc":{"line":1,"column":31},"parent":"/Users/angelospampinato/Development/tali-lessons/node_modules/semantic-ui-react/node_modules/lodash/_cloneDataView.js","resolved":"/Users/angelospampinato/Development/tali-lessons/node_modules/semantic-ui-react/node_modules/lodash/_cloneArrayBuffer.js"}],"generated":{"js":"var cloneArrayBuffer = require('./_cloneArrayBuffer');\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\nmodule.exports = cloneDataView;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/semantic-ui-react/node_modules/lodash/_cloneDataView.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/semantic-ui-react/node_modules/lodash/_cloneDataView.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/semantic-ui-react/node_modules/lodash/_cloneDataView.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/semantic-ui-react/node_modules/lodash/_cloneDataView.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/semantic-ui-react/node_modules/lodash/_cloneDataView.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/semantic-ui-react/node_modules/lodash/_cloneDataView.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/semantic-ui-react/node_modules/lodash/_cloneDataView.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/semantic-ui-react/node_modules/lodash/_cloneDataView.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/semantic-ui-react/node_modules/lodash/_cloneDataView.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/semantic-ui-react/node_modules/lodash/_cloneDataView.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/semantic-ui-react/node_modules/lodash/_cloneDataView.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/semantic-ui-react/node_modules/lodash/_cloneDataView.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/semantic-ui-react/node_modules/lodash/_cloneDataView.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/semantic-ui-react/node_modules/lodash/_cloneDataView.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/semantic-ui-react/node_modules/lodash/_cloneDataView.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/semantic-ui-react/node_modules/lodash/_cloneDataView.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/semantic-ui-react/node_modules/lodash/_cloneDataView.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}}],"sources":{"node_modules/semantic-ui-react/node_modules/lodash/_cloneDataView.js":"var cloneArrayBuffer = require('./_cloneArrayBuffer');\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\nmodule.exports = cloneDataView;\n"},"lineCount":17}},"error":null,"hash":"e90a3bd1f36ce4a83d96b87059878dab","cacheData":{"env":{}}}