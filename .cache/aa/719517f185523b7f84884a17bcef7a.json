{"id":"node_modules/ramda/src/internal/_dispatchable.js","dependencies":[{"name":"/Users/angelospampinato/Development/tali-recorder-lessons/package.json","includedInParent":true,"mtime":1600925821292},{"name":"/Users/angelospampinato/Development/tali-recorder-lessons/.babelrc","includedInParent":true,"mtime":1600800641143},{"name":"/Users/angelospampinato/Development/tali-recorder-lessons/node_modules/ramda/package.json","includedInParent":true,"mtime":1604284349369},{"name":"./_isArray","loc":{"line":3,"column":8},"parent":"/Users/angelospampinato/Development/tali-recorder-lessons/node_modules/ramda/src/internal/_dispatchable.js","resolved":"/Users/angelospampinato/Development/tali-recorder-lessons/node_modules/ramda/src/internal/_isArray.js"},{"name":"./_isTransformer","loc":{"line":7,"column":8},"parent":"/Users/angelospampinato/Development/tali-recorder-lessons/node_modules/ramda/src/internal/_dispatchable.js","resolved":"/Users/angelospampinato/Development/tali-recorder-lessons/node_modules/ramda/src/internal/_isTransformer.js"}],"generated":{"js":"var _isArray =\n/*#__PURE__*/\nrequire(\"./_isArray\");\n\nvar _isTransformer =\n/*#__PURE__*/\nrequire(\"./_isTransformer\");\n/**\n * Returns a function that dispatches with different strategies based on the\n * object in list position (last argument). If it is an array, executes [fn].\n * Otherwise, if it has a function with one of the given method names, it will\n * execute that function (functor case). Otherwise, if it is a transformer,\n * uses transducer [xf] to return a new transformer (transducer case).\n * Otherwise, it will default to executing [fn].\n *\n * @private\n * @param {Array} methodNames properties to check for a custom implementation\n * @param {Function} xf transducer to initialize if object is transformer\n * @param {Function} fn default ramda implementation\n * @return {Function} A function that dispatches on object in list position\n */\n\n\nfunction _dispatchable(methodNames, xf, fn) {\n  return function () {\n    if (arguments.length === 0) {\n      return fn();\n    }\n\n    var args = Array.prototype.slice.call(arguments, 0);\n    var obj = args.pop();\n\n    if (!_isArray(obj)) {\n      var idx = 0;\n\n      while (idx < methodNames.length) {\n        if (typeof obj[methodNames[idx]] === 'function') {\n          return obj[methodNames[idx]].apply(obj, args);\n        }\n\n        idx += 1;\n      }\n\n      if (_isTransformer(obj)) {\n        var transducer = xf.apply(null, args);\n        return transducer(obj);\n      }\n    }\n\n    return fn.apply(this, arguments);\n  };\n}\n\nmodule.exports = _dispatchable;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/ramda/src/internal/_dispatchable.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}}],"sources":{"node_modules/ramda/src/internal/_dispatchable.js":"var _isArray =\n/*#__PURE__*/\nrequire(\"./_isArray\");\n\nvar _isTransformer =\n/*#__PURE__*/\nrequire(\"./_isTransformer\");\n/**\n * Returns a function that dispatches with different strategies based on the\n * object in list position (last argument). If it is an array, executes [fn].\n * Otherwise, if it has a function with one of the given method names, it will\n * execute that function (functor case). Otherwise, if it is a transformer,\n * uses transducer [xf] to return a new transformer (transducer case).\n * Otherwise, it will default to executing [fn].\n *\n * @private\n * @param {Array} methodNames properties to check for a custom implementation\n * @param {Function} xf transducer to initialize if object is transformer\n * @param {Function} fn default ramda implementation\n * @return {Function} A function that dispatches on object in list position\n */\n\n\nfunction _dispatchable(methodNames, xf, fn) {\n  return function () {\n    if (arguments.length === 0) {\n      return fn();\n    }\n\n    var args = Array.prototype.slice.call(arguments, 0);\n    var obj = args.pop();\n\n    if (!_isArray(obj)) {\n      var idx = 0;\n\n      while (idx < methodNames.length) {\n        if (typeof obj[methodNames[idx]] === 'function') {\n          return obj[methodNames[idx]].apply(obj, args);\n        }\n\n        idx += 1;\n      }\n\n      if (_isTransformer(obj)) {\n        var transducer = xf.apply(null, args);\n        return transducer(obj);\n      }\n    }\n\n    return fn.apply(this, arguments);\n  };\n}\n\nmodule.exports = _dispatchable;"},"lineCount":54}},"error":null,"hash":"99cdef8af770db5da978669270f22114","cacheData":{"env":{}}}