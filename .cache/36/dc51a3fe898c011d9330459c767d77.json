{"id":"node_modules/ramda/src/forEach.js","dependencies":[{"name":"/Users/angelospampinato/Development/tali-lessons/package.json","includedInParent":true,"mtime":1600756027037},{"name":"/Users/angelospampinato/Development/tali-lessons/.babelrc","includedInParent":true,"mtime":1600745492802},{"name":"/Users/angelospampinato/Development/tali-lessons/node_modules/ramda/package.json","includedInParent":true,"mtime":1597808098910},{"name":"./internal/_checkForMethod","loc":{"line":3,"column":8},"parent":"/Users/angelospampinato/Development/tali-lessons/node_modules/ramda/src/forEach.js","resolved":"/Users/angelospampinato/Development/tali-lessons/node_modules/ramda/src/internal/_checkForMethod.js"},{"name":"./internal/_curry2","loc":{"line":7,"column":8},"parent":"/Users/angelospampinato/Development/tali-lessons/node_modules/ramda/src/forEach.js","resolved":"/Users/angelospampinato/Development/tali-lessons/node_modules/ramda/src/internal/_curry2.js"}],"generated":{"js":"var _checkForMethod =\n/*#__PURE__*/\nrequire(\"./internal/_checkForMethod\");\n\nvar _curry2 =\n/*#__PURE__*/\nrequire(\"./internal/_curry2\");\n/**\n * Iterate over an input `list`, calling a provided function `fn` for each\n * element in the list.\n *\n * `fn` receives one argument: *(value)*.\n *\n * Note: `R.forEach` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.forEach` method. For more\n * details on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n *\n * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\n * the original array. In some libraries this function is named `each`.\n *\n * Dispatches to the `forEach` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> *) -> [a] -> [a]\n * @param {Function} fn The function to invoke. Receives one argument, `value`.\n * @param {Array} list The list to iterate over.\n * @return {Array} The original list.\n * @see R.addIndex\n * @example\n *\n *      const printXPlusFive = x => console.log(x + 5);\n *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n *      // logs 6\n *      // logs 7\n *      // logs 8\n * @symb R.forEach(f, [a, b, c]) = [a, b, c]\n */\n\n\nvar forEach =\n/*#__PURE__*/\n_curry2(\n/*#__PURE__*/\n_checkForMethod('forEach', function forEach(fn, list) {\n  var len = list.length;\n  var idx = 0;\n\n  while (idx < len) {\n    fn(list[idx]);\n    idx += 1;\n  }\n\n  return list;\n}));\n\nmodule.exports = forEach;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/ramda/src/forEach.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/ramda/src/forEach.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}}],"sources":{"node_modules/ramda/src/forEach.js":"var _checkForMethod =\n/*#__PURE__*/\nrequire(\"./internal/_checkForMethod\");\n\nvar _curry2 =\n/*#__PURE__*/\nrequire(\"./internal/_curry2\");\n/**\n * Iterate over an input `list`, calling a provided function `fn` for each\n * element in the list.\n *\n * `fn` receives one argument: *(value)*.\n *\n * Note: `R.forEach` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.forEach` method. For more\n * details on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n *\n * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\n * the original array. In some libraries this function is named `each`.\n *\n * Dispatches to the `forEach` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> *) -> [a] -> [a]\n * @param {Function} fn The function to invoke. Receives one argument, `value`.\n * @param {Array} list The list to iterate over.\n * @return {Array} The original list.\n * @see R.addIndex\n * @example\n *\n *      const printXPlusFive = x => console.log(x + 5);\n *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n *      // logs 6\n *      // logs 7\n *      // logs 8\n * @symb R.forEach(f, [a, b, c]) = [a, b, c]\n */\n\n\nvar forEach =\n/*#__PURE__*/\n_curry2(\n/*#__PURE__*/\n_checkForMethod('forEach', function forEach(fn, list) {\n  var len = list.length;\n  var idx = 0;\n\n  while (idx < len) {\n    fn(list[idx]);\n    idx += 1;\n  }\n\n  return list;\n}));\n\nmodule.exports = forEach;"},"lineCount":60}},"error":null,"hash":"459bf126c1222419ad7223c6e26d2d94","cacheData":{"env":{}}}